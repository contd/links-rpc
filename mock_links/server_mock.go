// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/contd/links-rpc/links (interfaces: LinksClient,Links_GetLinksClient)

package mock_links

import (
	links "github.com/contd/links-rpc/links"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockLinksClient is a mock of LinksClient interface
type MockLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinksClientMockRecorder
}

// MockLinksClientMockRecorder is the mock recorder for MockLinksClient
type MockLinksClientMockRecorder struct {
	mock *MockLinksClient
}

// NewMockLinksClient creates a new mock instance
func NewMockLinksClient(ctrl *gomock.Controller) *MockLinksClient {
	mock := &MockLinksClient{ctrl: ctrl}
	mock.recorder = &MockLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLinksClient) EXPECT() *MockLinksClientMockRecorder {
	return _m.recorder
}

// CreateLink mocks base method
func (_m *MockLinksClient) CreateLink(_param0 context.Context, _param1 *links.LinkRequest, _param2 ...grpc.CallOption) (*links.LinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateLink", _s...)
	ret0, _ := ret[0].(*links.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink
func (_mr *MockLinksClientMockRecorder) CreateLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateLink", reflect.TypeOf((*MockLinksClient)(nil).CreateLink), _s...)
}

// DeleteLink mocks base method
func (_m *MockLinksClient) DeleteLink(_param0 context.Context, _param1 *links.LinkRequest, _param2 ...grpc.CallOption) (*links.LinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteLink", _s...)
	ret0, _ := ret[0].(*links.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLink indicates an expected call of DeleteLink
func (_mr *MockLinksClientMockRecorder) DeleteLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteLink", reflect.TypeOf((*MockLinksClient)(nil).DeleteLink), _s...)
}

// GetLink mocks base method
func (_m *MockLinksClient) GetLink(_param0 context.Context, _param1 *links.LinkRequest, _param2 ...grpc.CallOption) (*links.LinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetLink", _s...)
	ret0, _ := ret[0].(*links.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLink indicates an expected call of GetLink
func (_mr *MockLinksClientMockRecorder) GetLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLink", reflect.TypeOf((*MockLinksClient)(nil).GetLink), _s...)
}

// GetLinks mocks base method
func (_m *MockLinksClient) GetLinks(_param0 context.Context, _param1 *links.LinksFilter, _param2 ...grpc.CallOption) (links.Links_GetLinksClient, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetLinks", _s...)
	ret0, _ := ret[0].(links.Links_GetLinksClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks
func (_mr *MockLinksClientMockRecorder) GetLinks(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLinks", reflect.TypeOf((*MockLinksClient)(nil).GetLinks), _s...)
}

// UpdateLink mocks base method
func (_m *MockLinksClient) UpdateLink(_param0 context.Context, _param1 *links.LinkRequest, _param2 ...grpc.CallOption) (*links.LinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateLink", _s...)
	ret0, _ := ret[0].(*links.LinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLink indicates an expected call of UpdateLink
func (_mr *MockLinksClientMockRecorder) UpdateLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateLink", reflect.TypeOf((*MockLinksClient)(nil).UpdateLink), _s...)
}

// MockLinks_GetLinksClient is a mock of Links_GetLinksClient interface
type MockLinks_GetLinksClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinks_GetLinksClientMockRecorder
}

// MockLinks_GetLinksClientMockRecorder is the mock recorder for MockLinks_GetLinksClient
type MockLinks_GetLinksClientMockRecorder struct {
	mock *MockLinks_GetLinksClient
}

// NewMockLinks_GetLinksClient creates a new mock instance
func NewMockLinks_GetLinksClient(ctrl *gomock.Controller) *MockLinks_GetLinksClient {
	mock := &MockLinks_GetLinksClient{ctrl: ctrl}
	mock.recorder = &MockLinks_GetLinksClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLinks_GetLinksClient) EXPECT() *MockLinks_GetLinksClientMockRecorder {
	return _m.recorder
}

// CloseSend mocks base method
func (_m *MockLinks_GetLinksClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (_mr *MockLinks_GetLinksClientMockRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseSend", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).CloseSend))
}

// Context mocks base method
func (_m *MockLinks_GetLinksClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockLinks_GetLinksClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).Context))
}

// Header mocks base method
func (_m *MockLinks_GetLinksClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (_mr *MockLinks_GetLinksClientMockRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Header", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).Header))
}

// Recv mocks base method
func (_m *MockLinks_GetLinksClient) Recv() (*links.LinkRequest, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*links.LinkRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (_mr *MockLinks_GetLinksClientMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Recv", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).Recv))
}

// RecvMsg mocks base method
func (_m *MockLinks_GetLinksClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockLinks_GetLinksClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (_m *MockLinks_GetLinksClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockLinks_GetLinksClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (_m *MockLinks_GetLinksClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (_mr *MockLinks_GetLinksClientMockRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Trailer", reflect.TypeOf((*MockLinks_GetLinksClient)(nil).Trailer))
}
