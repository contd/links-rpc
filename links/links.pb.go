// Code generated by protoc-gen-go. DO NOT EDIT.
// source: links.proto

/*
Package links is a generated protocol buffer package.

It is generated from these files:
	links.proto

It has these top-level messages:
	LinkRequest
	LinkResponse
	LinksFilter
*/
package links

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new link
type LinkRequest struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	Created  string `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Done     int32  `protobuf:"varint,5,opt,name=done" json:"done,omitempty"`
}

func (m *LinkRequest) Reset()                    { *m = LinkRequest{} }
func (m *LinkRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkRequest) ProtoMessage()               {}
func (*LinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LinkRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LinkRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LinkRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *LinkRequest) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *LinkRequest) GetDone() int32 {
	if m != nil {
		return m.Done
	}
	return 0
}

// Response for getting a link by id
type LinkResponse struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Category string `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	Created  string `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Done     int32  `protobuf:"varint,5,opt,name=done" json:"done,omitempty"`
	Success  bool   `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
}

func (m *LinkResponse) Reset()                    { *m = LinkResponse{} }
func (m *LinkResponse) String() string            { return proto.CompactTextString(m) }
func (*LinkResponse) ProtoMessage()               {}
func (*LinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LinkResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LinkResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *LinkResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *LinkResponse) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *LinkResponse) GetDone() int32 {
	if m != nil {
		return m.Done
	}
	return 0
}

func (m *LinkResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LinksFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *LinksFilter) Reset()                    { *m = LinksFilter{} }
func (m *LinksFilter) String() string            { return proto.CompactTextString(m) }
func (*LinksFilter) ProtoMessage()               {}
func (*LinksFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LinksFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*LinkRequest)(nil), "links.LinkRequest")
	proto.RegisterType((*LinkResponse)(nil), "links.LinkResponse")
	proto.RegisterType((*LinksFilter)(nil), "links.LinksFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Links service

type LinksClient interface {
	// Get all Links with filter - A server-to-client streaming RPC.
	GetLinks(ctx context.Context, in *LinksFilter, opts ...grpc.CallOption) (Links_GetLinksClient, error)
	// Get a link given id
	GetLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	// Create a new Link - A simple RPC
	CreateLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	// Update a Link
	UpdateLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	// Delete a Link
	DeleteLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
}

type linksClient struct {
	cc *grpc.ClientConn
}

func NewLinksClient(cc *grpc.ClientConn) LinksClient {
	return &linksClient{cc}
}

func (c *linksClient) GetLinks(ctx context.Context, in *LinksFilter, opts ...grpc.CallOption) (Links_GetLinksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Links_serviceDesc.Streams[0], c.cc, "/links.Links/GetLinks", opts...)
	if err != nil {
		return nil, err
	}
	x := &linksGetLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Links_GetLinksClient interface {
	Recv() (*LinkRequest, error)
	grpc.ClientStream
}

type linksGetLinksClient struct {
	grpc.ClientStream
}

func (x *linksGetLinksClient) Recv() (*LinkRequest, error) {
	m := new(LinkRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *linksClient) GetLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := grpc.Invoke(ctx, "/links.Links/GetLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) CreateLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := grpc.Invoke(ctx, "/links.Links/CreateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) UpdateLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := grpc.Invoke(ctx, "/links.Links/UpdateLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksClient) DeleteLink(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := grpc.Invoke(ctx, "/links.Links/DeleteLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Links service

type LinksServer interface {
	// Get all Links with filter - A server-to-client streaming RPC.
	GetLinks(*LinksFilter, Links_GetLinksServer) error
	// Get a link given id
	GetLink(context.Context, *LinkRequest) (*LinkResponse, error)
	// Create a new Link - A simple RPC
	CreateLink(context.Context, *LinkRequest) (*LinkResponse, error)
	// Update a Link
	UpdateLink(context.Context, *LinkRequest) (*LinkResponse, error)
	// Delete a Link
	DeleteLink(context.Context, *LinkRequest) (*LinkResponse, error)
}

func RegisterLinksServer(s *grpc.Server, srv LinksServer) {
	s.RegisterService(&_Links_serviceDesc, srv)
}

func _Links_GetLinks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LinksFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LinksServer).GetLinks(m, &linksGetLinksServer{stream})
}

type Links_GetLinksServer interface {
	Send(*LinkRequest) error
	grpc.ServerStream
}

type linksGetLinksServer struct {
	grpc.ServerStream
}

func (x *linksGetLinksServer) Send(m *LinkRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Links_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/links.Links/GetLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).GetLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/links.Links/CreateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).CreateLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/links.Links/UpdateLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).UpdateLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Links_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/links.Links/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServer).DeleteLink(ctx, req.(*LinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Links_serviceDesc = grpc.ServiceDesc{
	ServiceName: "links.Links",
	HandlerType: (*LinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLink",
			Handler:    _Links_GetLink_Handler,
		},
		{
			MethodName: "CreateLink",
			Handler:    _Links_CreateLink_Handler,
		},
		{
			MethodName: "UpdateLink",
			Handler:    _Links_UpdateLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _Links_DeleteLink_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLinks",
			Handler:       _Links_GetLinks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "links.proto",
}

func init() { proto.RegisterFile("links.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x41, 0x4e, 0xeb, 0x30,
	0x14, 0xac, 0xd3, 0xa6, 0x4d, 0x5f, 0xbf, 0xbe, 0xd0, 0x63, 0x63, 0x65, 0x15, 0x79, 0x43, 0x56,
	0x15, 0x02, 0x04, 0x07, 0x00, 0xc1, 0x86, 0x95, 0x25, 0x0e, 0x50, 0xe2, 0x27, 0x64, 0x25, 0x8a,
	0x83, 0xed, 0x08, 0xe5, 0x1e, 0x1c, 0x80, 0xa3, 0xa2, 0xd8, 0x0d, 0x2a, 0x12, 0x1b, 0xba, 0x60,
	0x37, 0x33, 0x9e, 0x79, 0xcf, 0x1e, 0x19, 0x36, 0x8d, 0x6e, 0x6b, 0xb7, 0xed, 0xac, 0xf1, 0x06,
	0xd3, 0x40, 0xc4, 0x00, 0x9b, 0x47, 0xdd, 0xd6, 0x92, 0x5e, 0x7b, 0x72, 0x1e, 0xff, 0x43, 0xa2,
	0x15, 0x67, 0x05, 0x2b, 0x53, 0x99, 0x68, 0x85, 0x27, 0x30, 0xef, 0x6d, 0xc3, 0x93, 0x82, 0x95,
	0x6b, 0x39, 0x42, 0xcc, 0x21, 0xab, 0x76, 0x9e, 0x5e, 0x8c, 0x1d, 0xf8, 0x3c, 0xc8, 0x5f, 0x1c,
	0x39, 0xac, 0x2a, 0x4b, 0x3b, 0x4f, 0x8a, 0x2f, 0xc2, 0xd1, 0x44, 0x11, 0x61, 0xa1, 0x4c, 0x4b,
	0x3c, 0x0d, 0x93, 0x03, 0x16, 0xef, 0x0c, 0xfe, 0xc5, 0xdd, 0xae, 0x33, 0xad, 0xa3, 0xbf, 0x5c,
	0x3e, 0xba, 0x5d, 0x5f, 0x55, 0xe4, 0x1c, 0x5f, 0x16, 0xac, 0xcc, 0xe4, 0x44, 0xc5, 0x59, 0x6c,
	0xc4, 0xdd, 0xeb, 0xc6, 0x93, 0x1d, 0x8d, 0x35, 0x0d, 0x6f, 0xc6, 0xc6, 0x9b, 0xad, 0xe5, 0x44,
	0x2f, 0x3e, 0x12, 0x48, 0x83, 0x13, 0xaf, 0x21, 0x7b, 0x20, 0x1f, 0x31, 0x6e, 0x63, 0xcb, 0x07,
	0x33, 0xf2, 0x43, 0x6d, 0xdf, 0xb4, 0x98, 0x9d, 0x33, 0xbc, 0x82, 0xd5, 0x3e, 0x87, 0x3f, 0x58,
	0xf2, 0xd3, 0x6f, 0x5a, 0x2c, 0x49, 0xcc, 0xf0, 0x06, 0xe0, 0x36, 0xbc, 0xec, 0x88, 0xe0, 0x53,
	0xa7, 0x8e, 0x0b, 0xde, 0x51, 0x43, 0xbf, 0x0e, 0x3e, 0x2f, 0xc3, 0x5f, 0xbb, 0xfc, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0xd1, 0x23, 0x48, 0x7a, 0x02, 0x00, 0x00,
}
